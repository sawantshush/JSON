{"version":3,"sources":["Beer.js","reportWebVitals.js","App.js","Posts.js","Test.js","index.js"],"names":["Beer","className","style","fontSize","this","props","beer","name","src","image_url","alt","width","float","paddingRight","paddingBottom","tagline","Component","reportWebVitals","React","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Posts","posts","title","body","Test","fetchData","pageNum","a","postUrl","setState","loading","fetch","res","json","data","state","componentDidMount","perPage","window","addEventListener","infiniteScroll","innerHeight","document","documentElement","scrollTop","offsetHeight","console","log","newPage","removeEventListener","map","beerdata","idx","ReactDOM","render","StrictMode","getElementById"],"mappings":"0RAEqBA,E,4JACjB,WACJ,OACA,sBAAKC,UAAU,UAAf,UACG,qBAAKC,MAAO,CAACC,SAAS,QAAtB,SAAgCC,KAAKC,MAAMC,KAAKC,OAChD,qBAAKC,IAAKJ,KAAKC,MAAMC,KAAKG,UAAWC,IAAI,GAAGR,MAAO,CAACS,MAAO,OAAQC,MAAO,OAAOC,aAAc,OAAOC,cAAe,UACrH,mBAAGZ,MAAO,CAACC,SAAS,QAApB,SAA8BC,KAAKC,MAAMC,KAAKS,iB,GANfC,aCUnBC,GCRGC,IAAMF,UDJA,SAAAG,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,wBEJOQ,G,kKACjB,WAEI,OACI,sBAAK1B,UAAU,OAAf,UACI,6BAAKG,KAAKC,MAAMuB,MAAMC,QACtB,6BAAKzB,KAAKC,MAAMuB,MAAME,c,GANHd,cCCde,G,wDACnB,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IAQR2B,UATmB,uCASP,WAAMC,GAAN,eAAAC,EAAA,6DACNC,EADM,6DAC0DF,EAD1D,cAEV,EAAKG,SAAS,CAACC,SAAQ,IAFb,SAGJC,MAAMH,GACTd,MAAK,SAACkB,GAAD,OAASA,EAAIC,UAClBnB,MAAK,SAACoB,GAECA,GAEF,EAAKL,SAAS,CAACC,SAAQ,IACvB,EAAKD,SAAS,CAEZR,MAAM,GAAD,mBAAM,EAAKc,MAAMd,OAAjB,YAA2Ba,OAIlC,EAAKL,SAAS,CAACC,SAAQ,OAhBrB,2CATO,wDA+BnBM,kBAAoB,WAClB,EAAKX,UAAU,EAAKU,MAAME,SAC1BC,OAAOC,iBAAiB,SAAU,EAAKC,iBAjCtB,EAyCnBA,eAAiB,WAEf,GACEF,OAAOG,YAAcC,SAASC,gBAAgBC,YAC1CF,SAASC,gBAAgBE,aAE/B,CACIC,QAAQC,IAAI,YACd,IAAIC,EAAU,EAAKb,MAAME,QACzBW,GAAgB,GAChB,EAAKnB,SAAS,CACZQ,QAASW,IAIX,EAAKvB,UAAUuB,KAtDjB,EAAKb,MAAQ,CACXd,MAAO,GACPgB,QAAS,EACTP,SAAQ,GALO,E,wDAqCnB,WACEQ,OAAOW,oBAAoB,SAASpD,KAAK2C,kB,oBAsB3C,WAAU,IAAD,OACP,OAAO,gCACP,8CACK3C,KAAKsC,MAAMd,MAAM6B,KAAI,SAACC,EAASC,GAAV,OAAmB,cAAC,EAAD,CAAiB/B,MAAO8B,EAAUrB,QAAS,EAAKK,MAAML,SAA1CsB,a,GAhE3B3C,cCGlC4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1B9C,M","file":"static/js/main.551a77d5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Beer extends Component {\n    render() {\nreturn (\n<div className=\"beerDiv\">\n   <div style={{fontSize:'10pt'}}>{this.props.beer.name}</div>\n   <img src={this.props.beer.image_url} alt=\"\" style={{width: '30px', float: 'left',paddingRight: '10px',paddingBottom: '10px'}}/>\n   <p style={{fontSize:'10pt'}}>{this.props.beer.tagline}</p>\n</div>\n)\n}\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\nimport React from 'react';\nimport Beer from './Beer';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n    beers: [],\n    page: 1\n    }\n    }\n\n    fetchData = (pageNum) => {\n      let beerUrl = 'https://api.punkapi.com/v2/beers?page='+pageNum;\n      fetch(beerUrl)\n         .then(res=>res.json())\n         .then(data => {\n            this.setState({\n                beers: [...this.state.beers,...data]\n            })\n         })\n      }\n\n      componentDidMount = () => {\n        window.addEventListener('scroll', this.infiniteScroll);\n        this.fetchData(this.state.page);\n        }\n\n        infiniteScroll = () => {\n          // End of the document reached?\n          if (\n            window.innerHeight + document.documentElement.scrollTop\n            === document.documentElement.offsetHeight\n          ) \n          {\n            let newPage = this.state.page;\n            newPage++;\n            this.setState({\n              page: newPage\n            });\n            \n            this.fetchData(newPage);\n          }\n        }\n\n    render(){\n      return(\n        <div>\n        \n          {this.state.beers.map((beerdata,idx) => (<Beer key={idx} beer={beerdata} />))}\n        </div>\n      );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport \"./Post.css\";\n\nexport default class Posts extends Component {\n    render() {\n        \n        return (\n            <div className=\"card\">\n                <h4>{this.props.posts.title}</h4>\n                <h6>{this.props.posts.body}</h6>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport Posts from \"./Posts\";\nimport \"./Test.css\";\n\nexport default class Test extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      perPage: 1,\n      loading:false\n    };\n  }\n\n  fetchData = async(pageNum) => {\n    let postUrl = `https://jsonplaceholder.typicode.com/posts/?_start=${pageNum}&_limit=10`;\n    this.setState({loading:true})\n    await fetch(postUrl)\n      .then((res) => res.json())\n      .then((data) => {\n          // console.log(\"data\",data)\n          if (data)\n          {\n            this.setState({loading:false})\n            this.setState({\n           \n              posts: [...this.state.posts, ...data],\n            });\n          }\n          else{\n            this.setState({loading:false})\n          }\n        \n      });\n  };\n\n  componentDidMount = () => {\n    this.fetchData(this.state.perPage)\n    window.addEventListener(\"scroll\", this.infiniteScroll);\n    // this.fetchData(this.state.perPage);\n  };\n\n  componentWillUnmount(){\n    window.removeEventListener(\"scroll\",this.infiniteScroll);\n  }\n\n  infiniteScroll = () => {\n    // End of the document reached?\n    if (\n      window.innerHeight + document.documentElement.scrollTop\n      === document.documentElement.offsetHeight\n    ) \n    {\n        console.log(\"infinite\")\n      let newPage = this.state.perPage;\n      newPage=newPage+10;\n      this.setState({\n        perPage: newPage,\n       \n      });\n      \n      this.fetchData(newPage);\n    }\n  }\n\n  render() {\n    return <div>\n    <h1>Test Example</h1>\n        {this.state.posts.map((beerdata,idx) => (<Posts key={idx} posts={beerdata} loading={this.state.loading}/>))}\n    </div>;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Test from './Test';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Test />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}